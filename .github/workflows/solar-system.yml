name: Solar System WorkFlow

on:
    workflow_dispatch:
    push:
        branches:
            - main
            - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: superuser
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }} 

jobs:
    unit-testing:
        name: unit-testing
        strategy:
            # fail-fast: false
            # max-parallel: 1
            matrix:
                nodejs_version: [18]
                operating_system: [ubuntu-latest]
                exclude:
                    - nodejs_version: 18
                      operating_system: macos-latest
        runs-on: ${{ matrix.operating_system}}
        steps:
        - name: checkout repository 
          uses: actions/checkout@v4
        
        - name: setup NodeJs Version - ${{ matrix.nodejs_version}}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version}}
        
        - name: Install Dependencies
          run: npm install

        - name: cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
               
        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test 
        
        - name: Archive test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result - ${{ matrix.operating_system }}-${{ matrix.nodejs_version }}
            path: test-results.xml
    
    code-coverage:
        name: code-coverage
        runs-on: ubuntu-latest
        steps:
        - name: checkout repository 
          uses: actions/checkout@v4
        
        - name: setup NodeJs Version - 18
          uses: actions/setup-node@v3
          with:
            node-version: 18

        - name: cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
              
        - name: Install Dependencies
          run: npm install
        
        - name: Check Code Coverage
          continue-on-error: true
          run: npm run coverage
        
        - name: Archive test Result
          uses: actions/upload-artifact@v4
          with:
            name: code-coverage-result
            path: coverage
            retention-days: 5 
    
    docker:
        name: Containerization
        needs: [unit-testing, code-coverage]
        runs-on: ubuntu-latest
        steps:
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: checkout Repo
          uses: actions/checkout@v4
        
        # - name: print working directory 
        #   run: pwd
        
        - name: Debug - List Files
          run: ls -l 

        
        
        - name: Docker build for Testing
          uses: docker/build-push-action@v4
          with: 
            context: .
            # file: ./solar-system/Dockerfile
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha}}

        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-app -d \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha}}
            
            export IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing Image URL using wget
            sleep 30
            wget -q -o - $IP:3000/live | grep live 
