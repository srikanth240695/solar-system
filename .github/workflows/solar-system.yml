name: Solar System WorkFlow

on:
    workflow_dispatch:
    push:
        branches:
            - main
            - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: superuser
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }} 

jobs:
    unit-testing:
        name: unit-testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password

        strategy:
            # fail-fast: false
            # max-parallel: 1
            matrix:
                nodejs_version: [18]
                operating_system: [ubuntu-latest]
                exclude:
                    - nodejs_version: 18
                      operating_system: macos-latest
        runs-on: ${{ matrix.operating_system}}
        steps:
        - name: checkout repository 
          uses: actions/checkout@v4
        
        - name: setup NodeJs Version - ${{ matrix.nodejs_version}}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version}}
        
        - name: Install Dependencies
          run: npm install

        - name: cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
               
        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test 
        
        - name: Archive test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result - ${{ matrix.operating_system }}-${{ matrix.nodejs_version }}
            path: test-results.xml
    
    code-coverage:
        name: code-coverage
        container: 
          image: node:18
        
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options:
              --name mongo
        env:
            MONGO_URI: 'mongodb://mongo:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        
        steps:
        - name: checkout repository 
          uses: actions/checkout@v4
        
        # - name: setup NodeJs Version - 18
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 18

        - name: cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
              
        - name: Install Dependencies
          run: npm install
        
        - name: Check Code Coverage
          continue-on-error: true
          run: npm run coverage
        
        - name: Archive test Result
          uses: actions/upload-artifact@v4
          with:
            name: code-coverage-result
            path: coverage
            retention-days: 5 
    
    docker:
        name: Containerization
        needs: [unit-testing, code-coverage]
        permissions:
          packages: write
        runs-on: ubuntu-latest
        steps:
        - name: GHCR Login 
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: checkout Repo
          uses: actions/checkout@v4
        
        - name: Debug - List Files
          run: ls -l 
        
        - name: Docker build for Testing
          uses: docker/build-push-action@v4
          with: 
            context: .
            load: false
            tags: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha}}

        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-app -d \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha}}

        - name: List docker images 
          run: docker images
        
        - name: List running containers
          run: docker ps -a
        
        - name: Get container IP
          run: |
            export IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo " Container IP: $IP"
            echo "IP=$IP" >> $GITHUB_ENV

        - name: Check open ports in container
          run: docker exec solar-system-app netstat -tulnp

        - name: Wait for API to be Ready
          run: |
            for i in {1..10}; do
              curl -s httP://localhost:3000/live | grep live && break
              echo "Waiting for service"
              sleep 5
            done

        - name: Test API From Host
          run: curl -v http://localhost:3000/live || echo "API test failed inside the conatiner"

        - name: Test API from Host Using Localhost
          run: curl -v http://$IP:3000/live || echo "API test failed from host"

        - name: Container Registry push
          uses: docker/build-push-action@v4
          with: 
            context: .
            push: true
            tags: |
              ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha}}
              ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha}}
          
        # - name: Test API from Host Using Container IP
        #   run: curl -v http://$IP:3000/live || echo "API test failed using container IP"

        # - name: Test image url using wget
        #   run: |
        #     wget -q -O - $IP:3000/live | grep live 
    
    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      steps:
        - name: checkout Repo
          uses: actions/checkout@v4

        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v4
          with:
            version: 'latest'

        - name: Decode and Set kubeconfig
          run: |
            mkdir -p $HOME/.kube
            mkdir -p $HOME/.minikube/profiles/minikube
            # Decode and save the certificate files
            echo "${{ secrets.MINIKUBE_CA_CRT }}" | base64 --decode > $HOME/.minikube/ca.crt
            echo "${{ secrets.MINIKUBE_CLIENT_CRT }}" | base64 --decode > $HOME/.minikube/profiles/minikube/client.crt
            echo "${{ secrets.MINIKUBE_CLIENT_KEY }}" | base64 --decode > $HOME/.minikube/profiles/minikube/client.key
            # Decode kubeconfig and fix paths
            echo "${{ secrets.KUBECONFIG }}" | base64 --decode > $HOME/.kube/config
            # Replace Windows paths with Unix paths
            sed -i "s|C:\\\\Users\\\\6113534\\\\|$HOME/|g" $HOME/.kube/config
            sed -i "s|\\\\|/|g" $HOME/.kube/config
            export KUBECONFIG=$HOME/.kube/config
            chmod 600 $HOME/.kube/config
    
        - name: Debug Kubernetes Setup
          run: |
            ls -la $HOME/.kube/
            ls -la $HOME/.minikube/profiles/minikube/
            cat $HOME/.kube/config
            # curl -k -v https://136.226.243.102:8443/api
            kubectl version --client
            kubectl cluster-info --request-timeout=60s
    
        - name: Fetch Kubernetes Cluster Details
          run: |
            export KUBECONFIG=$HOME/.kube/config
            kubectl version --client
            kubectl get nodes --request-timeout=60s

        # - name: Decode and Set kubeconfig
        #   run: |
        #     mkdir -p $HOME/.kube  # Ensure the directory exists
        #     echo "${{ secrets.KUBECONFIG }}" | base64 --decode > $HOME/.kube/config
        #     export KUBECONFIG=$HOME/.kube/config
        #     chmod 600 $HOME/.kube/config  # Secure the kubeconfig file

        # - name: Fetch Kubernetes Cluster Details
        #   run: |
        #     export KUBECONFIG=$HOME/.kube/config
        #     kubectl version --client
        #     echo -----------------------
        #     kubectl get nodes
          
