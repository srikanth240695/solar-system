name: Solar System WorkFlow

on:
    workflow_dispatch:
    push:
        branches:
            - main
            - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: superuser
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }} 

jobs:
    unit-testing:
        name: unit-testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password

        strategy:
            # fail-fast: false
            # max-parallel: 1
            matrix:
                nodejs_version: [18]
                operating_system: [ubuntu-latest]
                exclude:
                    - nodejs_version: 18
                      operating_system: macos-latest
        runs-on: ${{ matrix.operating_system}}
        steps:
        - name: checkout repository 
          uses: actions/checkout@v4
        
        - name: setup NodeJs Version - ${{ matrix.nodejs_version}}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version}}
        
        - name: Install Dependencies
          run: npm install

        - name: cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
               
        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test 
        
        - name: Archive test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result - ${{ matrix.operating_system }}-${{ matrix.nodejs_version }}
            path: test-results.xml
    
    code-coverage:
        name: code-coverage
        container: 
          image: node:18
        
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options:
              --name mongo
        env:
            MONGO_URI: 'mongodb://mongo:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        
        steps:
        - name: checkout repository 
          uses: actions/checkout@v4
        
        # - name: setup NodeJs Version - 18
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 18

        - name: cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
              
        - name: Install Dependencies
          run: npm install
        
        - name: Check Code Coverage
          continue-on-error: true
          run: npm run coverage
        
        - name: Archive test Result
          uses: actions/upload-artifact@v4
          with:
            name: code-coverage-result
            path: coverage
            retention-days: 5 
    
    docker:
        name: Containerization
        needs: [unit-testing, code-coverage]
        permissions:
          packages: write
        runs-on: ubuntu-latest
        steps:
        - name: GHCR Login 
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: checkout Repo
          uses: actions/checkout@v4
        
        - name: Debug - List Files
          run: ls -l 
        
        - name: Docker build for Testing
          uses: docker/build-push-action@v4
          with: 
            context: .
            load: false
            tags: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha}}

        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-app -d \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha}}

        - name: List docker images 
          run: docker images
        
        - name: List running containers
          run: docker ps -a
        
        - name: Get container IP
          run: |
            export IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo " Container IP: $IP"
            echo "IP=$IP" >> $GITHUB_ENV

        - name: Check open ports in container
          run: docker exec solar-system-app netstat -tulnp

        - name: Wait for API to be Ready
          run: |
            for i in {1..10}; do
              curl -s httP://localhost:3000/live | grep live && break
              echo "Waiting for service"
              sleep 5
            done

        - name: Test API From Host
          run: curl -v http://localhost:3000/live || echo "API test failed inside the conatiner"

        - name: Test API from Host Using Localhost
          run: curl -v http://$IP:3000/live || echo "API test failed from host"

        - name: Container Registry push
          uses: docker/build-push-action@v4
          with: 
            context: .
            push: true
            tags: |
              ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha}}
              ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha}}
          
        # - name: Test API from Host Using Container IP
        #   run: curl -v http://$IP:3000/live || echo "API test failed using container IP"

        # - name: Test image url using wget
        #   run: |
        #     wget -q -O - $IP:3000/live | grep live 
    
    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: docker
      uses: srikanth240695/solar-system/.github/workflows/reuse-deployment.yml

    dev-Integration-testing:
        name: Dev Integration Testing
        if: contains(github.ref, 'feature/')
        needs: dev-deploy
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v4
        - run: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            kubectl version --client

        - run: |
           curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
           sudo install minikube-linux-amd64 /usr/local/bin/minikube
           rm minikube-linux-amd64
           minikube version

        - name: Download Minikube Config
          uses: actions/download-artifact@v4
          with:
            name: minikube-config-development
            path: .
        - name: Set up Minikube Config
          run: |
            tar -xzf minikube-config.tar.gz -C ~
            chmod 600 ~/.kube/config
            minikube start --driver=docker --kubernetes-version=v1.32.0 --memory 4096 --cpus 2
            kubectl cluster-info --request-timeout=60s

        - name: Recreate Namespace and Deployments
          run: |
            kubectl create namespace ${{ vars.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
              --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
              --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
              --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
              --save-config \
              --dry-run=client \
              -o yaml | kubectl apply -f -
            echo "Replacing tokens in manifest files..."
        - uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/deployment.yaml", "kubernetes/development/service.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha}}
            INGRESS_IP: ${{ env.INGRESS_IP}}
        - run: |
            kubectl apply -f kubernetes/development/deployment.yaml
            kubectl apply -f kubernetes/development/service.yaml
            echo "Checking deployment status..."
            kubectl -n ${{ vars.NAMESPACE }} get deployment -o wide
            kubectl -n ${{ vars.NAMESPACE }} get pods -o wide
            echo "Waiting for scheduler to create pods (30s delay)..."
            sleep 30
            kubectl -n ${{ vars.NAMESPACE }} get pods -o wide
            echo "Fetching cluster events..."
            kubectl get events -n ${{ vars.NAMESPACE }}
            echo "Waiting for pods to be ready..."
            kubectl -n ${{ vars.NAMESPACE }} wait --for=condition=ready pod -l app=solar-system --timeout=600s || {
              echo "Error: Pods not ready after 600s"
              kubectl -n ${{ vars.NAMESPACE }} get all -o wide
              kubectl -n ${{ vars.NAMESPACE }} describe deployment solar-system
              kubectl -n ${{ vars.NAMESPACE }} get pods -o wide
              kubectl -n ${{ vars.NAMESPACE }} describe pod -l app=solar-system || echo "No pods to describe"
              kubectl -n ${{ vars.NAMESPACE }} logs --all-containers=true --prefix -l app=solar-system || echo "No logs available"
              kubectl get events -n ${{ vars.NAMESPACE }} --sort-by='.metadata.creationTimestamp'
              kubectl describe node minikube
              exit 1
            }
            kubectl -n ${{ vars.NAMESPACE }} get pods

        - name: Test Application with Port Forwarding
          env:
            URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
          run: |
            echo "Ingress URL (for reference): https://$URL/live"
            echo "Listing services in namespace ${{ vars.NAMESPACE }}:"
            kubectl -n ${{ vars.NAMESPACE }} get svc
            echo "Setting up port-forward..."
            kubectl -n ${{ vars.NAMESPACE }} port-forward service/solar-system 3000:3000 &
            sleep 15
            echo "Testing: http://localhost:3000/live"
            echo "-----------------------"
            RESPONSE=$(curl -s --retry 5 --retry-delay 5 "http://localhost:3000/live")
            echo "Raw response: $RESPONSE"
            if [ -z "$RESPONSE" ]; then
              echo "Error: No response from the service"
              exit 1
            fi
            echo "$RESPONSE" | jq -r .status | grep -i live || {
              echo "API test failed"
              echo "Curl exit code: $?"
              kubectl -n ${{ vars.NAMESPACE }} describe pod -l app=solar-system
              kubectl -n ${{ vars.NAMESPACE }} logs -l app=solar-system --all-containers=true
              exit 1
            }

    prod-deploy:
      if: github.ref == 'refs/heads/main'
      needs: docker
      uses: srikanth240695/solar-system/.github/workflows/reuse-deployment.yml

    prod-Integration-testing:
        name: Prod Integration Testing
        if: github.ref == 'refs/heads/main'
        needs: prod-deploy
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v4
        - run: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            kubectl version --client

        - run: |
           curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
           sudo install minikube-linux-amd64 /usr/local/bin/minikube
           rm minikube-linux-amd64
           minikube version

        - name: Download Minikube Config
          uses: actions/download-artifact@v4
          with:
            name: minikube-config-production
            path: .
        - name: Set up Minikube Config
          run: |
            tar -xzf minikube-config.tar.gz -C ~
            chmod 600 ~/.kube/config
            minikube start --driver=docker --kubernetes-version=v1.32.0 --memory 4096 --cpus 2
            kubectl cluster-info --request-timeout=60s

        - name: Recreate Namespace and Deployments
          run: |
            kubectl create namespace ${{ vars.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
              --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
              --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
              --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
              --save-config \
              --dry-run=client \
              -o yaml | kubectl apply -f -
            echo "Replacing tokens in manifest files..."
        - uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/production/deployment.yaml", "kubernetes/production/service.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha}}
            INGRESS_IP: ${{ env.INGRESS_IP}}
        - run: |
            kubectl apply -f kubernetes/production/deployment.yaml
            kubectl apply -f kubernetes/production/service.yaml
            echo "Checking deployment status..."
            kubectl -n ${{ vars.NAMESPACE }} get deployment -o wide
            kubectl -n ${{ vars.NAMESPACE }} get pods -o wide
            echo "Waiting for scheduler to create pods (30s delay)..."
            sleep 30
            kubectl -n ${{ vars.NAMESPACE }} get pods -o wide
            echo "Fetching cluster events..."
            kubectl get events -n ${{ vars.NAMESPACE }}
            echo "Waiting for pods to be ready..."
            kubectl -n ${{ vars.NAMESPACE }} wait --for=condition=ready pod -l app=solar-system --timeout=600s || {
              echo "Error: Pods not ready after 600s"
              kubectl -n ${{ vars.NAMESPACE }} get all -o wide
              kubectl -n ${{ vars.NAMESPACE }} describe deployment solar-system
              kubectl -n ${{ vars.NAMESPACE }} get pods -o wide
              kubectl -n ${{ vars.NAMESPACE }} describe pod -l app=solar-system || echo "No pods to describe"
              kubectl -n ${{ vars.NAMESPACE }} logs --all-containers=true --prefix -l app=solar-system || echo "No logs available"
              kubectl get events -n ${{ vars.NAMESPACE }} --sort-by='.metadata.creationTimestamp'
              kubectl describe node minikube
              exit 1
            }
            kubectl -n ${{ vars.NAMESPACE }} get pods

        - name: Test Application with Port Forwarding
          env:
            URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL }}
          run: |
            echo "Ingress URL (for reference): https://$URL/live"
            echo "Listing services in namespace ${{ vars.NAMESPACE }}:"
            kubectl -n ${{ vars.NAMESPACE }} get svc
            echo "Setting up port-forward..."
            kubectl -n ${{ vars.NAMESPACE }} port-forward service/solar-system 3000:3000 &
            sleep 15
            echo "Testing: http://localhost:3000/live"
            echo "-----------------------"
            RESPONSE=$(curl -s --retry 5 --retry-delay 5 "http://localhost:3000/live")
            echo "Raw response: $RESPONSE"
            if [ -z "$RESPONSE" ]; then
              echo "Error: No response from the service"
              exit 1
            fi
            echo "$RESPONSE" | jq -r .status | grep -i live || {
              echo "API test failed"
              echo "Curl exit code: $?"
              kubectl -n ${{ vars.NAMESPACE }} describe pod -l app=solar-system
              kubectl -n ${{ vars.NAMESPACE }} logs -l app=solar-system --all-containers=true
              exit 1
            }